@page "/arquivo"

@using BlazorInputFile
@using BlazorApp1.Scripts
@inject IJSRuntime JSRuntime

<div class="container card">
    <div class="card-body">
        <div class="row col-sm-auto btn btn-sm">
            <InputFile OnChange="HandleFileSelected" />
        </div>

        @if (arquivo != null)
        {
            <div class="row col-auto">Name: @arquivo.Name</div>
            <div class="row col-auto">Size in bytes: @arquivo.Size</div>
            <div class="row col-auto">Last modified date: @arquivo.LastModified.ToShortDateString()</div>
            <div class="row col-auto">Content type: @arquivo.Type</div>

            @if (arquivo.Type.Contains("image"))
            {
                <br />
                <div class="row col-auto">
                    <button type="button" class="btn btn-sm btn-outline-primary" @onclick="GirarImagem">Girar Imagem</button>
                </div>
                <br />
                <div class="row">
                    <div class="col-6">
                        <img src="data:@arquivo.Type;base64, @arquivoBase64" style="width:100%; height:auto" class="drift-trigger" data-zoom="data:@arquivo.Type;base64, @arquivoBase64" />
                    </div>
                    <div class="col-6">
                        <div class="detail"></div>
                    </div>
                </div>
            }

            @if (arquivo.Type.Contains("pdf"))
            {
                <div class="row col-auto">
                    <embed src="data:@arquivo.Type;base64,@arquivoBase64" height="480" type="@arquivo.Type" style="width:100%">
                </div>
            }

            @if (arquivo.Type.Contains("audio"))
            {
                <div class="row col-auto">
                    <audio src="data:@arquivo.Type;base64,@arquivoBase64" controls="controls" autobuffer="autobuffer" style="width:100%"></audio>
                </div>
            }
        }
    </div>
</div>


@code {
    IFileListEntry arquivo;

    private string arquivoBase64;
    private bool carregouImagem = false;

    void GirarImagem() => arquivoBase64 = Auxiliar.GirarImagem(arquivoBase64);

    async Task<bool> HandleFileSelected(IFileListEntry[] files)
    {
        arquivo = files.FirstOrDefault();

        arquivoBase64 = await Auxiliar.ArquivoEmBase64(arquivo);

        if (arquivo.Type.Contains("image") && !carregouImagem)
        {
            await JSRuntime.InvokeVoidAsync("zoom");
            carregouImagem = true;
        }
        else carregouImagem = false;

        return true;
    }
}